package pro.sky.management.service;

import org.springframework.stereotype.Service;
import pro.sky.management.model.Employee;

import java.awt.*;
import java.util.Comparator;
import java.util.Objects;
import java.util.stream.Collectors;
@Service
public class DepartmentService {
    private final EmployeeService employeeService;
    public DepartmentService(EmployeeService employeeService) {
        this.employeeService = employeeService;
    }
    public void changeDepartment(Employee Employee, int newDepartment) {
        employeeService.getAll().stream()
        .filter(value -> Objects.equals(Employee, value))
        .findFirst()
        .ifPresent(value -> {
            value.setDepartment(newDepartment);
        });
    }
    public Object findEmployeesByDepartment() {
        return employeeService.getAll().stream()
        .collect(Collectors.groupingBy(Employee::getDepartment));
    }
    public void indexSalariesForDepartment(double index, int department) {
        employeeService.getAll().stream()
        .filter(employee -> employee.getDepartment() == department)
        .forEach(employee -> employee.getClass(
        (int) (employee.getSalary() + employee.getClass() * index / 100)));
        }
        public double averageSalaryForDepartment(int department) {
            double orElse = employeeService.getAll().stream()
                    .filter(employee -> employee.getDepartment() == department)
                    .mapToInt(Employee::getSalary)
                    .average()
                    .orElse(0);
            return orElse;
        }

    public Employee findEmployeeWithMinSalaryFromDepartment(int department) {
    return employeeService.getAll().stream()
    .filter(employee -> employee.getDepartment() == department)
    .min(Comparator.comparing(Employee::getSalary))
    .orElse(null);
    }
    public Employee findEmployeeWithMaxSalaryFromDepartment(int department) {
        return employeeService.getAll().stream()
                .filter(employee -> employee.getDepartment() == department)
                .max(Comparator.comparing(Employee::getSalary))
                .orElse(null);
    }
    public double totalSalariesForDepartment(int department) {
        return employeeService.getAll().stream()
        .filter(employee -> employee.getDepartment() == department)
        .mapToInt(Employee::getSalary)
        .sum();
    }
    public List<Employee>findAllEmployeesFromDepartment(int department) {
        return employeeService.getAll().stream()
        .filter(employee -> employee.getDepartment() == department)
        .toList;
    }

    }
